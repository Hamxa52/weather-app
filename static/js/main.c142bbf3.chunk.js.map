{"version":3,"sources":["images/WeatherIcons.gif","apiKeys.js","forcast.js","currentLocation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","key","base","Forcast","props","query","setQuery","useState","error","setError","weather","setWeather","search","useCallback","city","axios","get","apiKeys","then","response","data","catch","console","defaults","useEffect","React","createElement","className","ReactAnimatedWeather","icon","color","size","animate","type","placeholder","onChange","e","target","value","src","alt","onClick","style","cursor","main","name","sys","country","Math","round","temp","humidity","visibility","wind","speed","Weather","Component","constructor","arguments","state","lat","lon","temperatureC","undefined","temperatureF","description","getPosition","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getWeather","async","api_call","fetch","ok","Error","status","json","this","setState","setWeatherIcon","alert","mainWeather","weatherIcons","Haze","Clouds","Rain","Snow","Dust","Drizzle","Fog","Smoke","Tornado","default","componentDidMount","position","coords","latitude","longitude","timerID","setInterval","componentWillUnmount","clearInterval","render","Fragment","Clock","format","interval","ticking","d","Date","getDay","getDate","getMonth","getFullYear","loader","width","WebkitUserDrag","fontSize","fontWeight","marginTop","App","CurrentLocation","href","download","rel","Boolean","window","location","hostname","match","process","env","NODE_ENV","ReactDOM","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c142bbf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WeatherIcons.0a218296.gif\";","// Visit https://api.openweathermap.org & then signup to get our API keys for free\nmodule.exports = {\n  key: \"1db07ab3c4f9dee0164d997f522b66c0\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport axios from \"axios\";\nimport apiKeys from \"./apiKeys\"; // Ensure this file contains your API key and base URL\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nfunction Forcast(props) {\n  const [query, setQuery] = useState(\"\"); // State to hold the city query\n  const [error, setError] = useState(\"\"); // State to hold any error messages\n  const [weather, setWeather] = useState({}); // State to hold the weather data\n\n  // Search function to fetch weather data based on the city\n  const search = useCallback((city) => {\n    if (!city) return; // Don't search if the city is empty\n\n    axios\n      .get(\n        `${apiKeys.base}weather?q=${city}&units=metric&APPID=${apiKeys.key}`\n      )\n      .then((response) => {\n        setWeather(response.data);\n        setError(\"\"); // Clear any previous errors\n      })\n      .catch((error) => {\n        console.error(error);\n        setWeather({}); // Clear previous weather data\n        setError(\"City not found. Please try another city.\"); // Set error message\n      });\n  }, []);\n\n  const defaults = {\n    color: \"white\",\n    size: 112,\n    animate: true,\n  };\n\n  // Call search with the default city when the component mounts\n  useEffect(() => {\n    search(\"Multan\"); // Default city search\n  }, [search]);\n\n  return (\n    <div className=\"forecast\">\n      <div className=\"forecast-icon\">\n        <ReactAnimatedWeather\n          icon={props.icon}\n          color={defaults.color}\n          size={defaults.size}\n          animate={defaults.animate}\n        />\n      </div>\n      <div className=\"today-weather\">\n        <h3>{props.weather}</h3>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search any city\"\n            onChange={(e) => setQuery(e.target.value)} // Update the query state\n            value={query} // Bind the input value to query state\n          />\n          <div className=\"img-box\">\n            <img\n              src=\"https://images.avishkaar.cc/workflow/newhp/search-white.png\"\n              alt=\"Search\"\n              onClick={() => search(query)} // Call search with the query\n              style={{ cursor: \"pointer\" }} // Add pointer to show it's clickable\n            />\n          </div>\n          {/* Search icon instead of button */}\n        </div>\n        <ul>\n          {typeof weather.main !== \"undefined\" ? (\n            <div className=\"weather-details\">\n              <li className=\"cityHead\">\n                <p>\n                  {weather.name}, {weather.sys.country}\n                </p>\n                <img\n                  className=\"temp\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n                  alt=\"Weather icon\"\n                />\n              </li>\n              <li>\n                Temperature{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.main.temp)}Â°C ({weather.weather[0].main})\n                </span>\n              </li>\n              <li>\n                Humidity{\" \"}\n                <span className=\"temp\">{Math.round(weather.main.humidity)}%</span>\n              </li>\n              <li>\n                Visibility{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.visibility / 1000)} km\n                </span>\n              </li>\n              <li>\n                Wind Speed{\" \"}\n                <span className=\"temp\">\n                  {Math.round(weather.wind.speed)} Km/h\n                </span>\n              </li>\n            </div>\n          ) : (\n            <div className=\"error-message\">\n              {error ? <p>{error}</p> : <p>Type in a city name and hit Search.</p>}\n            </div>\n          )}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Forcast;\n","import React from \"react\";\nimport apiKeys from \"./apiKeys\";\nimport Clock from \"react-live-clock\";\nimport Forcast from \"./forcast\";\nimport loader from \"./images/WeatherIcons.gif\";\nimport ReactAnimatedWeather from \"react-animated-weather\";\n\nconst dateBuilder = (d) => {\n  const months = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\", \"December\"\n  ];\n  const days = [\n    \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\n  ];\n\n  const day = days[d.getDay()];\n  const date = d.getDate();\n  const month = months[d.getMonth()];\n  const year = d.getFullYear();\n\n  return `${day}, ${date} ${month} ${year}`;\n};\n\nconst defaults = {\n  color: \"white\",\n  size: 112,\n  animate: true,\n};\n\nclass Weather extends React.Component {\n  state = {\n    lat: 30.1575, // Default latitude for Multan\n    lon: 71.5249, // Default longitude for Multan\n    temperatureC: undefined,\n    temperatureF: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    icon: \"CLEAR_DAY\",\n    main: undefined,\n  };\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      this.getPosition()\n        .then((position) => {\n          this.getWeather(position.coords.latitude, position.coords.longitude);\n        })\n        .catch(() => {\n          this.getWeather(this.state.lat, this.state.lon); // Multan as default location\n          alert(\n            \"You have disabled location services. Default location (Multan) weather will be shown.\"\n          );\n        });\n    } else {\n      alert(\"Geolocation not available. Showing default location (Multan) weather.\");\n      this.getWeather(this.state.lat, this.state.lon);\n    }\n\n    this.timerID = setInterval(\n      () => this.getWeather(this.state.lat, this.state.lon),\n      600000 // 10 minutes\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  getPosition = (options) => {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n  };\n\n  getWeather = async (lat, lon) => {\n    try {\n      const api_call = await fetch(\n        `${apiKeys.base}weather?lat=${lat}&lon=${lon}&units=metric&APPID=${apiKeys.key}`\n      );\n\n      if (!api_call.ok) {\n        throw new Error(`HTTP error! status: ${api_call.status}`);\n      }\n\n      const data = await api_call.json();\n\n      if (data && data.main && data.weather) {\n        this.setState({\n          lat: lat,\n          lon: lon,\n          city: data.name,\n          temperatureC: Math.round(data.main.temp),\n          temperatureF: Math.round(data.main.temp * 1.8 + 32),\n          humidity: data.main.humidity,\n          main: data.weather[0].main,\n          country: data.sys.country,\n        });\n        this.setWeatherIcon(data.weather[0].main);\n      }\n    } catch (error) {\n      console.error(\"Error fetching weather data:\", error);\n      alert(\"Failed to fetch weather data. Please try again later.\");\n    }\n  };\n\n  setWeatherIcon = (mainWeather) => {\n    const weatherIcons = {\n      Haze: \"CLEAR_DAY\",\n      Clouds: \"CLOUDY\",\n      Rain: \"RAIN\",\n      Snow: \"SNOW\",\n      Dust: \"WIND\",\n      Drizzle: \"SLEET\",\n      Fog: \"FOG\",\n      Smoke: \"FOG\",\n      Tornado: \"WIND\",\n      default: \"CLEAR_DAY\",\n    };\n\n    this.setState({\n      icon: weatherIcons[mainWeather] || weatherIcons[\"default\"],\n    });\n  };\n\n  render() {\n    const { temperatureC, city, country, main, icon } = this.state;\n\n    if (temperatureC !== undefined) {\n      return (\n        <React.Fragment>\n          <div className=\"city\">\n            <div className=\"title\">\n              <h2>{city}</h2>\n              <h3>{country}</h3>\n            </div>\n            <div className=\"mb-icon\">\n              <ReactAnimatedWeather\n                icon={icon}\n                color={defaults.color}\n                size={defaults.size}\n                animate={defaults.animate}\n              />\n              <p>{main}</p>\n            </div>\n            <div className=\"date-time\">\n              <div className=\"dmy\">\n                <div className=\"current-time\">\n                  <Clock format=\"HH:mm:ss\" interval={1000} ticking={true} />\n                </div>\n                <div className=\"current-date\">{dateBuilder(new Date())}</div>\n              </div>\n              <div className=\"temperature\">\n                <p>\n                  {temperatureC}Â°<span>C</span>\n                </p>\n              </div>\n            </div>\n          </div>\n          <Forcast icon={icon} weather={main} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <img\n            src={loader}\n            alt=\"Loading...\"\n            style={{ width: \"50%\", WebkitUserDrag: \"none\" }}\n          />\n          <h3 style={{ color: \"white\", fontSize: \"22px\", fontWeight: \"600\" }}>\n            Detecting your location\n          </h3>\n          <h3 style={{ color: \"white\", marginTop: \"10px\" }}>\n            Your current location will be displayed and used for real-time\n            weather calculation.\n          </h3>\n        </React.Fragment>\n      );\n    }\n  }\n}\n\nexport default Weather;\n","import React from \"react\";\nimport CurrentLocation from \"./currentLocation\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <div className=\"container\">\n        <CurrentLocation />\n      </div>\n      <div className=\"footer-info\">\n        <a\n          href=\"https://www.htmlhints.com/article/how-to-create-toggle-switch/93\"\n          download\n        >\n          Download Source Code\n        </a>{\" \"}\n        | Developed by{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://www.gauravghai.dev/\"\n        >\n         Rao Hamza\n        </a>{\" \"}\n        | Powered by{\" \"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href=\"https://www.htmlhints.com/\"\n        >\n          HTML HINTS\n        </a>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This helps the app load faster on subsequent visits in production and gives it offline capabilities.\n// However, updates will only be visible on subsequent visits after all tabs of the page are closed.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '[::1]' ||\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    \n    if (publicUrl.origin !== window.location.origin) {\n      // Service worker won't work if PUBLIC_URL is on a different origin from what the page is served on.\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // Check if a service worker exists for localhost and validate it.\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker.');\n        });\n      } else {\n        // Register a valid service worker for non-localhost.\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        \n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // New content is available and will be used when all tabs are closed.\n                console.log('New content is available; please close all tabs to update.');\n                \n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // Content is cached for offline use.\n                console.log('Content is cached for offline use.');\n\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Ensure the service worker can be found, else reload the page.\n  fetch(swUrl, { headers: { 'Service-Worker': 'script' } })\n    .then((response) => {\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found, proceed with registration.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Define process fallback\nwindow.process = {\n  env: {\n    NODE_ENV: 'development', // or 'production' depending on your environment\n    // add other env variables if needed\n  },\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}